<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_3d_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>range = CAM_ZFAR
tilesize = 256+128
floors=0
z = 2;
d3d_set_culling(false);
//d3d_draw_floor(range,range,z,-range,-range,z,global.TEX[TEX_GRASS],range/20,range/20);

//Draw regular floor
for (yy = -range; yy &lt; range; yy+=tilesize*4) {
    for (xx = -range; xx &lt; range; xx+=tilesize*4) {
        if (CAM_FRUSTUM) {
            maydraw = frustum_culling(xx, yy, z+1, tilesize*sqrt(2));
        } else {
            maydraw = (point_distance(xx,yy,player_fps.x,player_fps.y)&lt;CAM_ZFAR)
        }
        if maydraw { 
            //Draw loose tiles for when the player is close (lighting)
            d3d_draw_floor(xx+tilesize*8/2,yy+tilesize*8/2,z,xx-tilesize*8/2,yy-tilesize*8/2,z,global.TEX[TEX_GRASS],16,16);
            floors++;
        }
    }
}

for (yy = -range; yy &lt; range; yy+=tilesize) {
    for (xx = -range; xx &lt; range; xx+=tilesize) {
        if (CAM_FRUSTUM) {
            maydraw = frustum_culling(xx, yy, z+1, tilesize*sqrt(2));
        } else {
            maydraw = (point_distance(xx,yy,player_fps.x,player_fps.y)&lt;CAM_ZFAR/3)
        }
        if maydraw { 
            //Draw loose tiles for when the player is close (lighting)
            d3d_draw_floor(xx+tilesize/2,yy+tilesize/2,z+1,xx-tilesize/2,yy-tilesize/2,z+1,global.TEX[TEX_GRASS],2,2);
            floors++;
        }
    }
}
d3d_set_culling(true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
