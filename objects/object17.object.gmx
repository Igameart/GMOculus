<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>fuzzies = 100;

xyrange = 200;

lifetime = 400;

minz = 10;
maxz = 120;

for (i=0; i&lt;fuzzies; i++) {
    fuzzy[i,0] = obj_player.x-xyrange/2 +random(xyrange/2) //X
    fuzzy[i,1] = obj_player.y-xyrange/2 +random(xyrange/2) //X
    fuzzy[i,2] = random(maxz-minz)+minz; //Z
    fuzzy[i,3] = random(360); //Directionxy
    
    fuzzy[i,4] = 0; // Alpha
    fuzzy[i,5] = 0; // State
    fuzzy[i,6] = 0; // Lifetime
    fuzzy[i,7] = random(3)+1; // Speed
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Draw fuzzies
for (i=0; i&lt;fuzzies; i++) {
    xx=fuzzy[i,0];
    yy=fuzzy[i,1];
    zz=fuzzy[i,2];
    
    draw_set_alpha(fuzzy[i,4]);
    //d3d_transform_add_translation(xx,yy,zz);   
    d3d_model_draw(global.MODEL[MOD_EFFECT_PLANE],xx,yy,zz,global.TEX[TEX_FLYING_FUZZY]);
    draw_set_alpha(1);
}

// Update fuzzies

for (i=0; i&lt;fuzzies; i++) {
    // Move X Y
    fuzzy[i,0]-=lengthdir_x(fuzzy[i,7],fuzzy[i,3]); 
    fuzzy[i,1]-=lengthdir_y(fuzzy[i,7],fuzzy[i,3]);    
    // Random Z
    fuzzy[i,2]+=fuzzy[i,7]/2 - random(fuzzy[i,7]);
    
    fuzzy[i,3]+=-2+random(4);
    
    if (fuzzy[i,5] == 0) {
        fuzzy[i,4] += 0.01;
        if ( fuzzy[i,4] &gt;= 1 ) {
            fuzzy[i,5] = 1;
            fuzzy[i,6] = 0;
        }
    }
    
    if (fuzzy[i,5] == 1) {
        if ( fuzzy[i,6] &gt;= lifetime ) {
            fuzzy[i,5] = 2;
            fuzzy[i,6] = 0;
        }
    }
    
    if (fuzzy[i,5] == 2) {
        fuzzy[i,4] -= 0.01;
        if ( fuzzy[i,4] &lt;= 0 ) { //Respawn!
            fuzzy[i,0] = obj_player.x-xyrange/2 +random(xyrange/2) //X
            fuzzy[i,1] = obj_player.y-xyrange/2 +random(xyrange/2) //X
            fuzzy[i,2] = random(maxz-minz)+minz; //Z
            fuzzy[i,3] = random(360); //Directionxy
            
            fuzzy[i,4] = 0; // Alpha
            fuzzy[i,5] = 0; // State
            fuzzy[i,6] = 0; // Lifetime
            fuzzy[i,7] = random(3)+1; // Speed
        }
    }
    
    fuzzy[i,6] += 1; // Lifetime
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
